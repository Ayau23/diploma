/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/client/login/": {
    /** @description Method providing user login */
    post: operations["client_login_create"];
  };
  "/api/client/register/": {
    post: operations["client_register_create"];
  };
  "/api/clients/": {
    get: operations["clients_list"];
    post: operations["clients_create"];
  };
  "/api/clients/{id}/": {
    get: operations["clients_retrieve"];
    put: operations["clients_update"];
    delete: operations["clients_destroy"];
    patch: operations["clients_partial_update"];
  };
  "/api/clients/me/": {
    get: operations["clients_me_retrieve"];
  };
  "/api/companies/": {
    get: operations["companies_list"];
    post: operations["companies_create"];
  };
  "/api/companies/{id}/": {
    get: operations["companies_retrieve"];
    put: operations["companies_update"];
    delete: operations["companies_destroy"];
    patch: operations["companies_partial_update"];
  };
  "/api/companies/me/": {
    get: operations["companies_me_retrieve"];
  };
  "/api/company/login/": {
    /** @description Method providing user login */
    post: operations["company_login_create"];
  };
  "/api/company/register/": {
    post: operations["company_register_create"];
  };
  "/api/logout/": {
    post: operations["logout_create"];
  };
  "/api/schema/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_retrieve"];
  };
  "/api/schema/json/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_json_retrieve"];
  };
  "/api/token/": {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["token_create"];
  };
  "/api/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["token_refresh_create"];
  };
  "/api/user/favorite/list/": {
    get: operations["user_favorite_list_list"];
  };
  "/api/vacancy/{id}": {
    get: operations["vacancy_retrieve"];
  };
  "/api/vacancy/{id}/like/": {
    post: operations["vacancy_like_create"];
  };
  "/api/vacancy/{id}/response/": {
    post: operations["vacancy_response_create"];
  };
  "/api/vacancy/create/": {
    post: operations["vacancy_create_create"];
  };
  "/api/vacancy/list/": {
    get: operations["vacancy_list_list"];
  };
  "/api/vacancy/response/list/": {
    get: operations["vacancy_response_list_list"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    City: {
      id: number;
      city?: string;
      country?: number | null;
    };
    CityRequest: {
      city?: string;
      country?: number | null;
    };
    Client: {
      id: number;
      /**
       * Email address 
       * Format: email
       */
      email: string;
      city: components["schemas"]["City"];
      first_name?: string;
      last_name?: string;
      phone: string;
      /** Format: uri */
      cv?: string | null;
    };
    ClientCreate: {
      id: number;
      email: string;
      city?: number | null;
      first_name: string;
      last_name: string;
      phone: string;
      refresh_token: string;
      access_token: string;
    };
    ClientCreateRequest: {
      email: string;
      password: string;
      city?: number | null;
      first_name: string;
      last_name: string;
      phone: string;
    };
    ClientLogin: {
      email: string;
      refresh_token: string;
      access_token: string;
      first_name: string;
      last_name: string;
      id: number;
    };
    ClientLoginRequest: {
      email: string;
      password: string;
    };
    ClientRequest: {
      /**
       * Email address 
       * Format: email
       */
      email: string;
      first_name?: string;
      last_name?: string;
      phone: string;
      /** Format: binary */
      cv?: string | null;
    };
    Company: {
      id: number;
      company_name: string;
      company_description: string;
      city: components["schemas"]["City"];
    };
    CompanyCreate: {
      id: number;
      email: string;
      city?: number | null;
      company_name: string;
      company_description: string;
      refresh_token: string;
      access_token: string;
    };
    CompanyCreateRequest: {
      email: string;
      password: string;
      city?: number | null;
      company_name: string;
      company_description: string;
    };
    CompanyLogin: {
      id: number;
      email: string;
      company_name: string;
      refresh_token: string;
      access_token: string;
      company_description: string;
    };
    CompanyLoginRequest: {
      email: string;
      password: string;
    };
    CompanyRequest: {
      company_name: string;
      company_description: string;
    };
    Favorite: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
    };
    Logout: {
      refresh: string;
    };
    LogoutRequest: {
      refresh: string;
    };
    OccupationSerialazer: {
      id: number;
      name: string;
    };
    PatchedClientRequest: {
      /**
       * Email address 
       * Format: email
       */
      email?: string;
      first_name?: string;
      last_name?: string;
      phone?: string;
      /** Format: binary */
      cv?: string | null;
    };
    PatchedCompanyRequest: {
      company_name?: string;
      company_description?: string;
    };
    Response: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
      /** Format: date-time */
      date: string;
    };
    Specialization: {
      id: number;
      name: string;
      skills: number;
    };
    /** @enum {boolean} */
    StatusEnum: true | false;
    TokenObtainPair: {
      access: string;
      refresh: string;
    };
    TokenObtainPairRequest: {
      email: string;
      password: string;
    };
    TokenRefresh: {
      access: string;
    };
    TokenRefreshRequest: {
      refresh: string;
    };
    Vacancy: {
      name: string;
      content: string;
      city: components["schemas"]["City"];
      salary_min: number;
      salary_max: number;
      company: components["schemas"]["Company"];
      company_name: string;
      status?: components["schemas"]["StatusEnum"];
      occupation: components["schemas"]["OccupationSerialazer"];
      specialization: components["schemas"]["Specialization"];
      id: number;
    };
    VacancyCreate: {
      id: number;
      name: string;
      content: string;
      salary_max: number;
      salary_min: number;
      is_deleted?: boolean;
      status?: components["schemas"]["StatusEnum"];
      city?: number | null;
      company?: number | null;
      occupation?: number | null;
      specialization?: number | null;
    };
    VacancyCreateRequest: {
      name: string;
      content: string;
      salary_max: number;
      salary_min: number;
      is_deleted?: boolean;
      status?: components["schemas"]["StatusEnum"];
      city?: number | null;
      company?: number | null;
      occupation?: number | null;
      specialization?: number | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  client_login_create: {
    /** @description Method providing user login */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientLoginRequest"];
        "multipart/form-data": components["schemas"]["ClientLoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClientLogin"];
        };
      };
    };
  };
  client_register_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientCreateRequest"];
        "multipart/form-data": components["schemas"]["ClientCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientCreate"];
        };
      };
    };
  };
  clients_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Client"])[];
        };
      };
    };
  };
  clients_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
        "multipart/form-data": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
        "multipart/form-data": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_destroy: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  clients_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedClientRequest"];
        "multipart/form-data": components["schemas"]["PatchedClientRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  companies_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Company"])[];
        };
      };
    };
  };
  companies_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyRequest"];
        "multipart/form-data": components["schemas"]["CompanyRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyRequest"];
        "multipart/form-data": components["schemas"]["CompanyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_destroy: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  companies_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedCompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCompanyRequest"];
        "multipart/form-data": components["schemas"]["PatchedCompanyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  company_login_create: {
    /** @description Method providing user login */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyLoginRequest"];
        "multipart/form-data": components["schemas"]["CompanyLoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CompanyLogin"];
        };
      };
    };
  };
  company_register_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyCreateRequest"];
        "multipart/form-data": components["schemas"]["CompanyCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CompanyCreate"];
        };
      };
    };
  };
  logout_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LogoutRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LogoutRequest"];
        "multipart/form-data": components["schemas"]["LogoutRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Logout"];
        };
      };
    };
  };
  schema_retrieve: {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    parameters?: {
      query?: {
        format?: "json" | "yaml";
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": {
            [key: string]: unknown | undefined;
          };
          "application/yaml": {
            [key: string]: unknown | undefined;
          };
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown | undefined;
          };
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  schema_json_retrieve: {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    parameters?: {
      query?: {
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown | undefined;
          };
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  token_create: {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenObtainPairRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
        "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenObtainPair"];
        };
      };
    };
  };
  token_refresh_create: {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefreshRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
        "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  user_favorite_list_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Favorite"])[];
        };
      };
    };
  };
  vacancy_retrieve: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vacancy"];
        };
      };
    };
  };
  vacancy_like_create: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      200: never;
    };
  };
  vacancy_response_create: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      200: never;
    };
  };
  vacancy_create_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["VacancyCreateRequest"];
        "multipart/form-data": components["schemas"]["VacancyCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["VacancyCreate"];
        };
      };
    };
  };
  vacancy_list_list: {
    parameters?: {
      query?: {
        city?: number;
        name?: string;
        occupation?: ("Full-Time" | "Internship" | "Part-Time" | "Remote")[];
        salary_max?: number;
        salary_min?: number;
        specialization?: ("Gachi Gang" | "IT")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Vacancy"])[];
        };
      };
    };
  };
  vacancy_response_list_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Response"])[];
        };
      };
    };
  };
}
