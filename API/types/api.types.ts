/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/allVacancy/": {
    get: operations["allVacancy_list"];
  };
  "/api/chat/": {
    get: operations["chat_list"];
  };
  "/api/chat/{id}": {
    get: operations["chat_retrieve"];
  };
  "/api/chat/{id}/delete/": {
    delete: operations["chat_delete_destroy"];
  };
  "/api/chat/{id}/update/": {
    put: operations["chat_update_update"];
    patch: operations["chat_update_partial_update"];
  };
  "/api/chat/create/": {
    post: operations["chat_create_create"];
  };
  "/api/client/login/": {
    /** @description Method providing user login */
    post: operations["client_login_create"];
  };
  "/api/client/register/": {
    post: operations["client_register_create"];
  };
  "/api/clients/": {
    get: operations["clients_list"];
    post: operations["clients_create"];
  };
  "/api/clients/{id}/": {
    get: operations["clients_retrieve"];
    put: operations["clients_update"];
    delete: operations["clients_destroy"];
    patch: operations["clients_partial_update"];
  };
  "/api/clients/me/": {
    get: operations["clients_me_retrieve"];
  };
  "/api/companies/": {
    get: operations["companies_list"];
    post: operations["companies_create"];
  };
  "/api/companies/{id}/": {
    get: operations["companies_retrieve"];
    put: operations["companies_update"];
    delete: operations["companies_destroy"];
    patch: operations["companies_partial_update"];
  };
  "/api/companies/me/": {
    get: operations["companies_me_retrieve"];
  };
  "/api/company/login/": {
    /** @description Method providing user login */
    post: operations["company_login_create"];
  };
  "/api/company/register/": {
    post: operations["company_register_create"];
  };
  "/api/companyResponse/": {
    get: operations["companyResponse_list"];
  };
  "/api/companyResponse/{id}/": {
    delete: operations["companyResponse_destroy"];
  };
  "/api/like/{id}": {
    post: operations["like_create"];
  };
  "/api/like/{id}/": {
    delete: operations["like_destroy"];
  };
  "/api/like/list/": {
    get: operations["like_list_list"];
  };
  "/api/logout/": {
    post: operations["logout_create"];
  };
  "/api/myResponse/list/": {
    get: operations["myResponse_list_list"];
  };
  "/api/occupation/": {
    get: operations["occupation_list"];
    post: operations["occupation_create"];
  };
  "/api/occupation/{id}/": {
    get: operations["occupation_retrieve"];
    put: operations["occupation_update"];
    delete: operations["occupation_destroy"];
    patch: operations["occupation_partial_update"];
  };
  "/api/responseAdd/{id}/": {
    post: operations["responseAdd_create"];
  };
  "/api/responseByIdUpdate/{id}/": {
    put: operations["responseByIdUpdate_update"];
    patch: operations["responseByIdUpdate_partial_update"];
  };
  "/api/responseByVacancy/{id}/": {
    get: operations["responseByVacancy_list"];
  };
  "/api/schema/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_retrieve"];
  };
  "/api/schema/json/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_json_retrieve"];
  };
  "/api/skill/": {
    get: operations["skill_list"];
    post: operations["skill_create"];
  };
  "/api/skill/{id}/": {
    get: operations["skill_retrieve"];
    put: operations["skill_update"];
    delete: operations["skill_destroy"];
    patch: operations["skill_partial_update"];
  };
  "/api/specialization/": {
    get: operations["specialization_list"];
    post: operations["specialization_create"];
  };
  "/api/specialization/{id}/": {
    get: operations["specialization_retrieve"];
    put: operations["specialization_update"];
    delete: operations["specialization_destroy"];
    patch: operations["specialization_partial_update"];
  };
  "/api/token/": {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["token_create"];
  };
  "/api/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["token_refresh_create"];
  };
  "/api/vacancy/": {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    get: operations["vacancy_list"];
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    post: operations["vacancy_create"];
  };
  "/api/vacancy/{id}/": {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    put: operations["vacancy_update"];
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    delete: operations["vacancy_destroy"];
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    patch: operations["vacancy_partial_update"];
  };
  "/api/vacancyByID/{id}": {
    get: operations["vacancyByID_retrieve"];
  };
  "/api/vacancyIDs/": {
    get: operations["vacancyIDs_list"];
  };
  "/api/vacancySearch/": {
    get: operations["vacancySearch_list"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Chat: {
      id: number;
      messages?: (number)[];
      participants: (string)[];
    };
    ChatRequest: {
      messages?: (number)[];
      participants: (string)[];
    };
    City: {
      id: number;
      city?: string;
      country?: number | null;
    };
    CityRequest: {
      city?: string;
      country?: number | null;
    };
    Client: {
      id: number;
      /**
       * Email address 
       * Format: email
       */
      email: string;
      city: components["schemas"]["City"];
      first_name?: string;
      last_name?: string;
      phone: string;
      /** Format: uri */
      cv?: string | null;
    };
    ClientCreate: {
      id: number;
      email: string;
      city?: number | null;
      first_name: string;
      last_name: string;
      phone: string;
      refresh_token: string;
      access_token: string;
    };
    ClientCreateRequest: {
      email: string;
      password: string;
      city?: number | null;
      first_name: string;
      last_name: string;
      phone: string;
    };
    ClientLogin: {
      email: string;
      refresh_token: string;
      access_token: string;
      first_name: string;
      last_name: string;
      id: number;
    };
    ClientLoginRequest: {
      email: string;
      password: string;
    };
    ClientRequest: {
      /**
       * Email address 
       * Format: email
       */
      email: string;
      first_name?: string;
      last_name?: string;
      phone: string;
      /** Format: binary */
      cv?: string | null;
    };
    Company: {
      id: number;
      company_name: string;
      company_description: string;
      city: components["schemas"]["City"];
    };
    CompanyCreate: {
      id: number;
      email: string;
      city?: number | null;
      company_name: string;
      company_description: string;
      refresh_token: string;
      access_token: string;
    };
    CompanyCreateRequest: {
      email: string;
      password: string;
      city?: number | null;
      company_name: string;
      company_description: string;
    };
    CompanyLogin: {
      id: number;
      email: string;
      company_name: string;
      refresh_token: string;
      access_token: string;
      company_description: string;
    };
    CompanyLoginRequest: {
      email: string;
      password: string;
    };
    CompanyRequest: {
      company_name: string;
      company_description: string;
    };
    Favorite: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
    };
    Logout: {
      refresh: string;
    };
    LogoutRequest: {
      refresh: string;
    };
    Occupation: {
      id: number;
      name: string;
    };
    OccupationRequest: {
      name: string;
    };
    PatchedChatRequest: {
      messages?: (number)[];
      participants?: (string)[];
    };
    PatchedClientRequest: {
      /**
       * Email address 
       * Format: email
       */
      email?: string;
      first_name?: string;
      last_name?: string;
      phone?: string;
      /** Format: binary */
      cv?: string | null;
    };
    PatchedCompanyRequest: {
      company_name?: string;
      company_description?: string;
    };
    PatchedOccupationRequest: {
      name?: string;
    };
    PatchedResponsePostRequest: {
      status?: boolean;
    };
    PatchedSkillCreateRequest: {
      name?: string;
      specialization?: number | null;
    };
    PatchedSpecializationRequest: {
      name?: string;
    };
    PatchedVacancyCreateRequest: {
      name?: string;
      content?: string;
      salary_max?: number;
      salary_min?: number;
      is_deleted?: boolean;
      status?: components["schemas"]["StatusEnum"];
      city?: number | null;
      company?: number | null;
      occupation?: (number)[];
      specialization?: (number)[];
    };
    Response: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
      response_text?: string | null;
      /** Format: date-time */
      date: string;
      status?: boolean;
    };
    ResponseAdd: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
      /** Format: date-time */
      date: string;
      response_text?: string | null;
    };
    ResponseAddRequest: {
      response_text?: string | null;
    };
    ResponsePost: {
      id: number;
      vacancy: components["schemas"]["Vacancy"];
      client: components["schemas"]["Client"];
      /** Format: date-time */
      date: string;
      status?: boolean;
    };
    ResponsePostRequest: {
      status?: boolean;
    };
    SkillCreate: {
      id: number;
      name: string;
      specialization?: number | null;
    };
    SkillCreateRequest: {
      name: string;
      specialization?: number | null;
    };
    Specialization: {
      id: number;
      name: string;
    };
    SpecializationRequest: {
      name: string;
    };
    /** @enum {boolean} */
    StatusEnum: true | false;
    TokenObtainPair: {
      access: string;
      refresh: string;
    };
    TokenObtainPairRequest: {
      email: string;
      password: string;
    };
    TokenRefresh: {
      access: string;
    };
    TokenRefreshRequest: {
      refresh: string;
    };
    Vacancy: {
      id: number;
      name: string;
      content: string;
      city: components["schemas"]["City"];
      salary_min: number;
      salary_max: number;
      company: components["schemas"]["Company"];
      company_name: string;
      status?: components["schemas"]["StatusEnum"];
      occupation: components["schemas"]["Occupation"];
      specialization: components["schemas"]["Specialization"];
    };
    VacancyCreate: {
      id: number;
      name: string;
      content: string;
      salary_max: number;
      salary_min: number;
      is_deleted?: boolean;
      status?: components["schemas"]["StatusEnum"];
      city?: number | null;
      company?: number | null;
      occupation?: (number)[];
      specialization?: (number)[];
    };
    VacancyCreateRequest: {
      name: string;
      content: string;
      salary_max: number;
      salary_min: number;
      is_deleted?: boolean;
      status?: components["schemas"]["StatusEnum"];
      city?: number | null;
      company?: number | null;
      occupation?: (number)[];
      specialization?: (number)[];
    };
    VacancyRequest: {
      name: string;
      content: string;
      salary_min: number;
      salary_max: number;
      status?: components["schemas"]["StatusEnum"];
      occupation: components["schemas"]["OccupationRequest"];
      specialization: components["schemas"]["SpecializationRequest"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  allVacancy_list: {
    parameters?: {
      query?: {
        city?: number;
        name?: string;
        occupation?: ("Full-Time" | "Internship" | "Part-Time" | "Remote")[];
        salary_max?: number;
        salary_min?: number;
        specialization?: (string)[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Vacancy"])[];
        };
      };
    };
  };
  chat_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Chat"])[];
        };
      };
    };
  };
  chat_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this chat. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Chat"];
        };
      };
    };
  };
  chat_delete_destroy: {
    parameters: {
        /** @description A unique integer value identifying this chat. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  chat_update_update: {
    parameters: {
        /** @description A unique integer value identifying this chat. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ChatRequest"];
        "multipart/form-data": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Chat"];
        };
      };
    };
  };
  chat_update_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this chat. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedChatRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedChatRequest"];
        "multipart/form-data": components["schemas"]["PatchedChatRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Chat"];
        };
      };
    };
  };
  chat_create_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ChatRequest"];
        "multipart/form-data": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Chat"];
        };
      };
    };
  };
  client_login_create: {
    /** @description Method providing user login */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientLoginRequest"];
        "multipart/form-data": components["schemas"]["ClientLoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClientLogin"];
        };
      };
    };
  };
  client_register_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientCreateRequest"];
        "multipart/form-data": components["schemas"]["ClientCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientCreate"];
        };
      };
    };
  };
  clients_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Client"])[];
        };
      };
    };
  };
  clients_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
        "multipart/form-data": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRequest"];
        "multipart/form-data": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_destroy: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  clients_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedClientRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedClientRequest"];
        "multipart/form-data": components["schemas"]["PatchedClientRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
    };
  };
  companies_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Company"])[];
        };
      };
    };
  };
  companies_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyRequest"];
        "multipart/form-data": components["schemas"]["CompanyRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyRequest"];
        "multipart/form-data": components["schemas"]["CompanyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_destroy: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  companies_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this user. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedCompanyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCompanyRequest"];
        "multipart/form-data": components["schemas"]["PatchedCompanyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  companies_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
    };
  };
  company_login_create: {
    /** @description Method providing user login */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyLoginRequest"];
        "multipart/form-data": components["schemas"]["CompanyLoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CompanyLogin"];
        };
      };
    };
  };
  company_register_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CompanyCreateRequest"];
        "multipart/form-data": components["schemas"]["CompanyCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CompanyCreate"];
        };
      };
    };
  };
  companyResponse_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Response"])[];
        };
      };
    };
  };
  companyResponse_destroy: {
    parameters: {
        /** @description A unique integer value identifying this response. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  like_create: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      200: never;
    };
  };
  like_destroy: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  like_list_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Favorite"])[];
        };
      };
    };
  };
  logout_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LogoutRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LogoutRequest"];
        "multipart/form-data": components["schemas"]["LogoutRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Logout"];
        };
      };
    };
  };
  myResponse_list_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Response"])[];
        };
      };
    };
  };
  occupation_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Occupation"])[];
        };
      };
    };
  };
  occupation_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OccupationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["OccupationRequest"];
        "multipart/form-data": components["schemas"]["OccupationRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Occupation"];
        };
      };
    };
  };
  occupation_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this occupation. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Occupation"];
        };
      };
    };
  };
  occupation_update: {
    parameters: {
        /** @description A unique integer value identifying this occupation. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OccupationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["OccupationRequest"];
        "multipart/form-data": components["schemas"]["OccupationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Occupation"];
        };
      };
    };
  };
  occupation_destroy: {
    parameters: {
        /** @description A unique integer value identifying this occupation. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  occupation_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this occupation. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedOccupationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOccupationRequest"];
        "multipart/form-data": components["schemas"]["PatchedOccupationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Occupation"];
        };
      };
    };
  };
  responseAdd_create: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResponseAddRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ResponseAddRequest"];
        "multipart/form-data": components["schemas"]["ResponseAddRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAdd"];
        };
      };
    };
  };
  responseByIdUpdate_update: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResponsePostRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ResponsePostRequest"];
        "multipart/form-data": components["schemas"]["ResponsePostRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePost"];
        };
      };
    };
  };
  responseByIdUpdate_partial_update: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedResponsePostRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedResponsePostRequest"];
        "multipart/form-data": components["schemas"]["PatchedResponsePostRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePost"];
        };
      };
    };
  };
  responseByVacancy_list: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Response"])[];
        };
      };
    };
  };
  schema_retrieve: {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    parameters?: {
      query?: {
        format?: "json" | "yaml";
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": {
            [key: string]: unknown | undefined;
          };
          "application/yaml": {
            [key: string]: unknown | undefined;
          };
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown | undefined;
          };
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  schema_json_retrieve: {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     * 
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    parameters?: {
      query?: {
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown | undefined;
          };
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  skill_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SkillCreate"])[];
        };
      };
    };
  };
  skill_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillCreateRequest"];
        "multipart/form-data": components["schemas"]["SkillCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SkillCreate"];
        };
      };
    };
  };
  skill_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this skill. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillCreate"];
        };
      };
    };
  };
  skill_update: {
    parameters: {
        /** @description A unique integer value identifying this skill. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillCreateRequest"];
        "multipart/form-data": components["schemas"]["SkillCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillCreate"];
        };
      };
    };
  };
  skill_destroy: {
    parameters: {
        /** @description A unique integer value identifying this skill. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  skill_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this skill. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSkillCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSkillCreateRequest"];
        "multipart/form-data": components["schemas"]["PatchedSkillCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillCreate"];
        };
      };
    };
  };
  specialization_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Specialization"])[];
        };
      };
    };
  };
  specialization_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecializationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SpecializationRequest"];
        "multipart/form-data": components["schemas"]["SpecializationRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Specialization"];
        };
      };
    };
  };
  specialization_retrieve: {
    parameters: {
        /** @description A unique integer value identifying this specialization. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Specialization"];
        };
      };
    };
  };
  specialization_update: {
    parameters: {
        /** @description A unique integer value identifying this specialization. */
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecializationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SpecializationRequest"];
        "multipart/form-data": components["schemas"]["SpecializationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Specialization"];
        };
      };
    };
  };
  specialization_destroy: {
    parameters: {
        /** @description A unique integer value identifying this specialization. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  specialization_partial_update: {
    parameters: {
        /** @description A unique integer value identifying this specialization. */
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSpecializationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSpecializationRequest"];
        "multipart/form-data": components["schemas"]["PatchedSpecializationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Specialization"];
        };
      };
    };
  };
  token_create: {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenObtainPairRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
        "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenObtainPair"];
        };
      };
    };
  };
  token_refresh_create: {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefreshRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
        "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  vacancy_list: {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["VacancyCreate"])[];
        };
      };
    };
  };
  vacancy_create: {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["VacancyCreateRequest"];
        "multipart/form-data": components["schemas"]["VacancyCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["VacancyCreate"];
        };
      };
    };
  };
  vacancy_update: {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VacancyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["VacancyCreateRequest"];
        "multipart/form-data": components["schemas"]["VacancyCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VacancyCreate"];
        };
      };
    };
  };
  vacancy_destroy: {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  vacancy_partial_update: {
    /**
     * @description A viewset that provides default `create()` `update()`,
     * `partial_update()`, `destroy()` and `list()` actions.
     */
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedVacancyCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedVacancyCreateRequest"];
        "multipart/form-data": components["schemas"]["PatchedVacancyCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VacancyCreate"];
        };
      };
    };
  };
  vacancyByID_retrieve: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vacancy"];
        };
      };
    };
  };
  vacancyIDs_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Vacancy"])[];
        };
      };
    };
  };
  vacancySearch_list: {
    parameters?: {
        /** @description A search term. */
      query?: {
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Vacancy"])[];
        };
      };
    };
  };
}
